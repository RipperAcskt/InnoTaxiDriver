// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/RipperAcskt/innotaxidriver/internal/service (interfaces: DriverRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/RipperAcskt/innotaxidriver/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockDriverRepo is a mock of DriverRepo interface.
type MockDriverRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDriverRepoMockRecorder
}

// MockDriverRepoMockRecorder is the mock recorder for MockDriverRepo.
type MockDriverRepoMockRecorder struct {
	mock *MockDriverRepo
}

// NewMockDriverRepo creates a new mock instance.
func NewMockDriverRepo(ctrl *gomock.Controller) *MockDriverRepo {
	mock := &MockDriverRepo{ctrl: ctrl}
	mock.recorder = &MockDriverRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriverRepo) EXPECT() *MockDriverRepoMockRecorder {
	return m.recorder
}

// DeleteDriverById mocks base method.
func (m *MockDriverRepo) DeleteDriverById(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDriverById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDriverById indicates an expected call of DeleteDriverById.
func (mr *MockDriverRepoMockRecorder) DeleteDriverById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDriverById", reflect.TypeOf((*MockDriverRepo)(nil).DeleteDriverById), arg0, arg1)
}

// GetDriverById mocks base method.
func (m *MockDriverRepo) GetDriverById(arg0 context.Context, arg1 string) (*model.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDriverById", arg0, arg1)
	ret0, _ := ret[0].(*model.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDriverById indicates an expected call of GetDriverById.
func (mr *MockDriverRepoMockRecorder) GetDriverById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDriverById", reflect.TypeOf((*MockDriverRepo)(nil).GetDriverById), arg0, arg1)
}

// SetRaitingById mocks base method.
func (m *MockDriverRepo) SetRaitingById(arg0 context.Context, arg1 string, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRaitingById", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRaitingById indicates an expected call of SetRaitingById.
func (mr *MockDriverRepoMockRecorder) SetRaitingById(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRaitingById", reflect.TypeOf((*MockDriverRepo)(nil).SetRaitingById), arg0, arg1, arg2)
}

// UpdateDriverById mocks base method.
func (m *MockDriverRepo) UpdateDriverById(arg0 context.Context, arg1 model.Driver) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDriverById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDriverById indicates an expected call of UpdateDriverById.
func (mr *MockDriverRepoMockRecorder) UpdateDriverById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDriverById", reflect.TypeOf((*MockDriverRepo)(nil).UpdateDriverById), arg0, arg1)
}
