// Code generated by go-swagger; DO NOT EDIT.

package driver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
)

// GetDriverOKCode is the HTTP code returned for type GetDriverOK
const GetDriverOKCode int = 200

/*
GetDriverOK Driver info

swagger:response getDriverOK
*/
type GetDriverOK struct {

	/*
	  In: Body
	*/
	Payload *GetDriverOKBody `json:"body,omitempty"`
}

// NewGetDriverOK creates GetDriverOK with default headers values
func NewGetDriverOK() *GetDriverOK {

	return &GetDriverOK{}
}

// WithPayload adds the payload to the get driver o k response
func (o *GetDriverOK) WithPayload(payload *GetDriverOKBody) *GetDriverOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get driver o k response
func (o *GetDriverOK) SetPayload(payload *GetDriverOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDriverOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetDriverBadRequestCode is the HTTP code returned for type GetDriverBadRequest
const GetDriverBadRequestCode int = 400

/*
GetDriverBadRequest Driver does not exist

swagger:response getDriverBadRequest
*/
type GetDriverBadRequest struct {

	/*
	  In: Body
	*/
	Payload *GetDriverBadRequestBody `json:"body,omitempty"`
}

// NewGetDriverBadRequest creates GetDriverBadRequest with default headers values
func NewGetDriverBadRequest() *GetDriverBadRequest {

	return &GetDriverBadRequest{}
}

// WithPayload adds the payload to the get driver bad request response
func (o *GetDriverBadRequest) WithPayload(payload *GetDriverBadRequestBody) *GetDriverBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get driver bad request response
func (o *GetDriverBadRequest) SetPayload(payload *GetDriverBadRequestBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDriverBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetDriverUnauthorizedCode is the HTTP code returned for type GetDriverUnauthorized
const GetDriverUnauthorizedCode int = 401

/*
GetDriverUnauthorized Token expired

swagger:response getDriverUnauthorized
*/
type GetDriverUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *GetDriverUnauthorizedBody `json:"body,omitempty"`
}

// NewGetDriverUnauthorized creates GetDriverUnauthorized with default headers values
func NewGetDriverUnauthorized() *GetDriverUnauthorized {

	return &GetDriverUnauthorized{}
}

// WithPayload adds the payload to the get driver unauthorized response
func (o *GetDriverUnauthorized) WithPayload(payload *GetDriverUnauthorizedBody) *GetDriverUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get driver unauthorized response
func (o *GetDriverUnauthorized) SetPayload(payload *GetDriverUnauthorizedBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDriverUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetDriverForbiddenCode is the HTTP code returned for type GetDriverForbidden
const GetDriverForbiddenCode int = 403

/*
GetDriverForbidden Incorrect token

swagger:response getDriverForbidden
*/
type GetDriverForbidden struct {

	/*
	  In: Body
	*/
	Payload *GetDriverForbiddenBody `json:"body,omitempty"`
}

// NewGetDriverForbidden creates GetDriverForbidden with default headers values
func NewGetDriverForbidden() *GetDriverForbidden {

	return &GetDriverForbidden{}
}

// WithPayload adds the payload to the get driver forbidden response
func (o *GetDriverForbidden) WithPayload(payload *GetDriverForbiddenBody) *GetDriverForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get driver forbidden response
func (o *GetDriverForbidden) SetPayload(payload *GetDriverForbiddenBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDriverForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetDriverInternalServerErrorCode is the HTTP code returned for type GetDriverInternalServerError
const GetDriverInternalServerErrorCode int = 500

/*
GetDriverInternalServerError Unexpected server error

swagger:response getDriverInternalServerError
*/
type GetDriverInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *GetDriverInternalServerErrorBody `json:"body,omitempty"`
}

// NewGetDriverInternalServerError creates GetDriverInternalServerError with default headers values
func NewGetDriverInternalServerError() *GetDriverInternalServerError {

	return &GetDriverInternalServerError{}
}

// WithPayload adds the payload to the get driver internal server error response
func (o *GetDriverInternalServerError) WithPayload(payload *GetDriverInternalServerErrorBody) *GetDriverInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get driver internal server error response
func (o *GetDriverInternalServerError) SetPayload(payload *GetDriverInternalServerErrorBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetDriverInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
