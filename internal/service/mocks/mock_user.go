// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/RipperAcskt/innotaxidriver/internal/service (interfaces: UserRepo)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/RipperAcskt/innotaxidriver/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepo is a mock of UserRepo interface.
type MockUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepoMockRecorder
}

// MockUserRepoMockRecorder is the mock recorder for MockUserRepo.
type MockUserRepoMockRecorder struct {
	mock *MockUserRepo
}

// NewMockUserRepo creates a new mock instance.
func NewMockUserRepo(ctrl *gomock.Controller) *MockUserRepo {
	mock := &MockUserRepo{ctrl: ctrl}
	mock.recorder = &MockUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepo) EXPECT() *MockUserRepoMockRecorder {
	return m.recorder
}

// DeleteDriverById mocks base method.
func (m *MockUserRepo) DeleteDriverById(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDriverById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDriverById indicates an expected call of DeleteDriverById.
func (mr *MockUserRepoMockRecorder) DeleteDriverById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDriverById", reflect.TypeOf((*MockUserRepo)(nil).DeleteDriverById), arg0, arg1)
}

// GetUserById mocks base method.
func (m *MockUserRepo) GetUserById(arg0 context.Context, arg1 string) (*model.Driver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", arg0, arg1)
	ret0, _ := ret[0].(*model.Driver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockUserRepoMockRecorder) GetUserById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockUserRepo)(nil).GetUserById), arg0, arg1)
}

// UpdateDriverById mocks base method.
func (m *MockUserRepo) UpdateDriverById(arg0 context.Context, arg1 model.Driver) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDriverById", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDriverById indicates an expected call of UpdateDriverById.
func (mr *MockUserRepoMockRecorder) UpdateDriverById(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDriverById", reflect.TypeOf((*MockUserRepo)(nil).UpdateDriverById), arg0, arg1)
}
