// Code generated by go-swagger; DO NOT EDIT.

package driver

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PutDriverHandlerFunc turns a function with the right signature into a put driver handler
type PutDriverHandlerFunc func(PutDriverParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PutDriverHandlerFunc) Handle(params PutDriverParams) middleware.Responder {
	return fn(params)
}

// PutDriverHandler interface for that can handle valid put driver params
type PutDriverHandler interface {
	Handle(PutDriverParams) middleware.Responder
}

// NewPutDriver creates a new http.Handler for the put driver operation
func NewPutDriver(ctx *middleware.Context, handler PutDriverHandler) *PutDriver {
	return &PutDriver{Context: ctx, Handler: handler}
}

/*
	PutDriver swagger:route PUT /driver driver putDriver

PutDriver put driver API
*/
type PutDriver struct {
	Context *middleware.Context
	Handler PutDriverHandler
}

func (o *PutDriver) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPutDriverParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PutDriverBadRequestBody put driver bad request body
//
// swagger:model PutDriverBadRequestBody
type PutDriverBadRequestBody struct {

	// error
	Error string `json:"error,omitempty"`
}

// Validate validates this put driver bad request body
func (o *PutDriverBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put driver bad request body based on context it is used
func (o *PutDriverBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutDriverBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutDriverBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PutDriverBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutDriverBody put driver body
//
// swagger:model PutDriverBody
type PutDriverBody struct {

	// email
	Email string `json:"email,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// phone number
	PhoneNumber string `json:"phone_number,omitempty"`
}

// Validate validates this put driver body
func (o *PutDriverBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put driver body based on context it is used
func (o *PutDriverBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutDriverBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutDriverBody) UnmarshalBinary(b []byte) error {
	var res PutDriverBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutDriverForbiddenBody put driver forbidden body
//
// swagger:model PutDriverForbiddenBody
type PutDriverForbiddenBody struct {

	// error
	Error string `json:"error,omitempty"`
}

// Validate validates this put driver forbidden body
func (o *PutDriverForbiddenBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put driver forbidden body based on context it is used
func (o *PutDriverForbiddenBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutDriverForbiddenBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutDriverForbiddenBody) UnmarshalBinary(b []byte) error {
	var res PutDriverForbiddenBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutDriverInternalServerErrorBody put driver internal server error body
//
// swagger:model PutDriverInternalServerErrorBody
type PutDriverInternalServerErrorBody struct {

	// error
	Error string `json:"error,omitempty"`
}

// Validate validates this put driver internal server error body
func (o *PutDriverInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put driver internal server error body based on context it is used
func (o *PutDriverInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutDriverInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutDriverInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PutDriverInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PutDriverUnauthorizedBody put driver unauthorized body
//
// swagger:model PutDriverUnauthorizedBody
type PutDriverUnauthorizedBody struct {

	// error
	Error string `json:"error,omitempty"`
}

// Validate validates this put driver unauthorized body
func (o *PutDriverUnauthorizedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put driver unauthorized body based on context it is used
func (o *PutDriverUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutDriverUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutDriverUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res PutDriverUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
