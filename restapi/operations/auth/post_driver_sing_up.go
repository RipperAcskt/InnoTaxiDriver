// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PostDriverSingUpHandlerFunc turns a function with the right signature into a post driver sing up handler
type PostDriverSingUpHandlerFunc func(PostDriverSingUpParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostDriverSingUpHandlerFunc) Handle(params PostDriverSingUpParams) middleware.Responder {
	return fn(params)
}

// PostDriverSingUpHandler interface for that can handle valid post driver sing up params
type PostDriverSingUpHandler interface {
	Handle(PostDriverSingUpParams) middleware.Responder
}

// NewPostDriverSingUp creates a new http.Handler for the post driver sing up operation
func NewPostDriverSingUp(ctx *middleware.Context, handler PostDriverSingUpHandler) *PostDriverSingUp {
	return &PostDriverSingUp{Context: ctx, Handler: handler}
}

/*
	PostDriverSingUp swagger:route POST /driver/sing-up auth postDriverSingUp

user authentication
*/
type PostDriverSingUp struct {
	Context *middleware.Context
	Handler PostDriverSingUpHandler
}

func (o *PostDriverSingUp) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostDriverSingUpParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostDriverSingUpBadRequestBody post driver sing up bad request body
//
// swagger:model PostDriverSingUpBadRequestBody
type PostDriverSingUpBadRequestBody struct {

	// error
	Error string `json:"error,omitempty"`
}

// Validate validates this post driver sing up bad request body
func (o *PostDriverSingUpBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post driver sing up bad request body based on context it is used
func (o *PostDriverSingUpBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostDriverSingUpBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostDriverSingUpBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostDriverSingUpBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostDriverSingUpBody post driver sing up body
//
// swagger:model PostDriverSingUpBody
type PostDriverSingUpBody struct {

	// email
	Email string `json:"email,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// phone number
	PhoneNumber string `json:"phone_number,omitempty"`

	// taxi type
	TaxiType string `json:"taxi_type,omitempty"`
}

// Validate validates this post driver sing up body
func (o *PostDriverSingUpBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post driver sing up body based on context it is used
func (o *PostDriverSingUpBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostDriverSingUpBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostDriverSingUpBody) UnmarshalBinary(b []byte) error {
	var res PostDriverSingUpBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostDriverSingUpCreatedBody post driver sing up created body
//
// swagger:model PostDriverSingUpCreatedBody
type PostDriverSingUpCreatedBody struct {

	// status
	Status string `json:"status,omitempty"`
}

// Validate validates this post driver sing up created body
func (o *PostDriverSingUpCreatedBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post driver sing up created body based on context it is used
func (o *PostDriverSingUpCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostDriverSingUpCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostDriverSingUpCreatedBody) UnmarshalBinary(b []byte) error {
	var res PostDriverSingUpCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostDriverSingUpInternalServerErrorBody post driver sing up internal server error body
//
// swagger:model PostDriverSingUpInternalServerErrorBody
type PostDriverSingUpInternalServerErrorBody struct {

	// error
	Error string `json:"error,omitempty"`
}

// Validate validates this post driver sing up internal server error body
func (o *PostDriverSingUpInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post driver sing up internal server error body based on context it is used
func (o *PostDriverSingUpInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostDriverSingUpInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostDriverSingUpInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PostDriverSingUpInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
